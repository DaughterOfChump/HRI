using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace pr2_controllers_msgs
    {
        public class Pr2GripperCommand : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "Pr2GripperCommand";
            public readonly string md5sum = "680acaff79486f017132a7f198d40f08";
            public double position;
            public double max_effort;

            public Pr2GripperCommand ()
            {
                position = 0.0;
                max_effort = 0.0;
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += "position: " + Convert.ToString(position) + "\n";
                string_rep += "max_effort: " + Convert.ToString(max_effort) + "\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                System.Byte[] position_bytes = BitConverter.GetBytes(position);
                stream.Write(position_bytes, 0, position_bytes.Length);
                System.Byte[] max_effort_bytes = BitConverter.GetBytes(max_effort);
                stream.Write(max_effort_bytes, 0, max_effort_bytes.Length);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                position = BitConverter.ToDouble(serialized, curIndex);
                curIndex += BitConverter.GetBytes(position).Length;
                max_effort = BitConverter.ToDouble(serialized, curIndex);
                curIndex += BitConverter.GetBytes(max_effort).Length;
                return (curIndex - startIndex);
            }

        }
    }
}
