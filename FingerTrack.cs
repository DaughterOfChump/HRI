using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace person_tracker
    {
        public class FingerTrack : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "FingerTrack";
            public readonly string md5sum = "f9ea59e68112fcde7e55323fd2ba99f6";
            public std_msgs.Header header;
            public float FingerPosition;
            public readonly System.Byte UNKNOWN = 0;
            public readonly System.Byte CLOSED = 1;
            public readonly System.Byte OPEN = 2;
            public System.Byte FingerState;
            public float FingerStateConfidence;

            public FingerTrack ()
            {
                header = new std_msgs.Header();
                FingerPosition = 0.0f;
                FingerState = 0;
                FingerStateConfidence = 0.0f;
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += header.ToStringRaw() + "\n";
                string_rep += "FingerPosition: " + Convert.ToString(FingerPosition) + "\n";
                string_rep += "FingerState: " + Convert.ToString(FingerState) + "\n";
                string_rep += "FingerStateConfidence: " + Convert.ToString(FingerStateConfidence) + "\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                header.Serialize(stream);
                System.Byte[] FingerPosition_bytes = BitConverter.GetBytes(FingerPosition);
                stream.Write(FingerPosition_bytes, 0, FingerPosition_bytes.Length);
                System.Byte[] FingerState_bytes = new System.Byte[] {FingerState};
                stream.Write(FingerState_bytes, 0, FingerState_bytes.Length);
                System.Byte[] FingerStateConfidence_bytes = BitConverter.GetBytes(FingerStateConfidence);
                stream.Write(FingerStateConfidence_bytes, 0, FingerStateConfidence_bytes.Length);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                curIndex += header.Deserialize(serialized, curIndex);
                FingerPosition = BitConverter.ToSingle(serialized, curIndex);
                curIndex += BitConverter.GetBytes(FingerPosition).Length;
                FingerState = serialized[curIndex];
                curIndex++;
                FingerStateConfidence = BitConverter.ToSingle(serialized, curIndex);
                curIndex += BitConverter.GetBytes(FingerStateConfidence).Length;
                return (curIndex - startIndex);
            }

        }
    }
}
