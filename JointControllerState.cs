using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace pr2_controllers_msgs
    {
        public class JointControllerState : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "JointControllerState";
            public readonly string md5sum = "c0d034a7bf20aeb1c37f3eccb7992b69";
            public std_msgs.Header header;
            public double set_point;
            public double process_value;
            public double process_value_dot;
            public double error;
            public double time_step;
            public double command;
            public double p;
            public double i;
            public double d;
            public double i_clamp;

            public JointControllerState ()
            {
                header = new std_msgs.Header();
                set_point = 0.0;
                process_value = 0.0;
                process_value_dot = 0.0;
                error = 0.0;
                time_step = 0.0;
                command = 0.0;
                p = 0.0;
                i = 0.0;
                d = 0.0;
                i_clamp = 0.0;
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += header.ToStringRaw() + "\n";
                string_rep += "set_point: " + Convert.ToString(set_point) + "\n";
                string_rep += "process_value: " + Convert.ToString(process_value) + "\n";
                string_rep += "process_value_dot: " + Convert.ToString(process_value_dot) + "\n";
                string_rep += "error: " + Convert.ToString(error) + "\n";
                string_rep += "time_step: " + Convert.ToString(time_step) + "\n";
                string_rep += "command: " + Convert.ToString(command) + "\n";
                string_rep += "p: " + Convert.ToString(p) + "\n";
                string_rep += "i: " + Convert.ToString(i) + "\n";
                string_rep += "d: " + Convert.ToString(d) + "\n";
                string_rep += "i_clamp: " + Convert.ToString(i_clamp) + "\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                header.Serialize(stream);
                System.Byte[] set_point_bytes = BitConverter.GetBytes(set_point);
                stream.Write(set_point_bytes, 0, set_point_bytes.Length);
                System.Byte[] process_value_bytes = BitConverter.GetBytes(process_value);
                stream.Write(process_value_bytes, 0, process_value_bytes.Length);
                System.Byte[] process_value_dot_bytes = BitConverter.GetBytes(process_value_dot);
                stream.Write(process_value_dot_bytes, 0, process_value_dot_bytes.Length);
                System.Byte[] error_bytes = BitConverter.GetBytes(error);
                stream.Write(error_bytes, 0, error_bytes.Length);
                System.Byte[] time_step_bytes = BitConverter.GetBytes(time_step);
                stream.Write(time_step_bytes, 0, time_step_bytes.Length);
                System.Byte[] command_bytes = BitConverter.GetBytes(command);
                stream.Write(command_bytes, 0, command_bytes.Length);
                System.Byte[] p_bytes = BitConverter.GetBytes(p);
                stream.Write(p_bytes, 0, p_bytes.Length);
                System.Byte[] i_bytes = BitConverter.GetBytes(i);
                stream.Write(i_bytes, 0, i_bytes.Length);
                System.Byte[] d_bytes = BitConverter.GetBytes(d);
                stream.Write(d_bytes, 0, d_bytes.Length);
                System.Byte[] i_clamp_bytes = BitConverter.GetBytes(i_clamp);
                stream.Write(i_clamp_bytes, 0, i_clamp_bytes.Length);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                curIndex += header.Deserialize(serialized, curIndex);
                set_point = BitConverter.ToDouble(serialized, curIndex);
                curIndex += BitConverter.GetBytes(set_point).Length;
                process_value = BitConverter.ToDouble(serialized, curIndex);
                curIndex += BitConverter.GetBytes(process_value).Length;
                process_value_dot = BitConverter.ToDouble(serialized, curIndex);
                curIndex += BitConverter.GetBytes(process_value_dot).Length;
                error = BitConverter.ToDouble(serialized, curIndex);
                curIndex += BitConverter.GetBytes(error).Length;
                time_step = BitConverter.ToDouble(serialized, curIndex);
                curIndex += BitConverter.GetBytes(time_step).Length;
                command = BitConverter.ToDouble(serialized, curIndex);
                curIndex += BitConverter.GetBytes(command).Length;
                p = BitConverter.ToDouble(serialized, curIndex);
                curIndex += BitConverter.GetBytes(p).Length;
                i = BitConverter.ToDouble(serialized, curIndex);
                curIndex += BitConverter.GetBytes(i).Length;
                d = BitConverter.ToDouble(serialized, curIndex);
                curIndex += BitConverter.GetBytes(d).Length;
                i_clamp = BitConverter.ToDouble(serialized, curIndex);
                curIndex += BitConverter.GetBytes(i_clamp).Length;
                return (curIndex - startIndex);
            }

        }
    }
}
