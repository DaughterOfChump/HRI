using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace person_tracker
    {
        public class TrackerState : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "TrackerState";
            public readonly string md5sum = "89723a2424a2d04eb9af5deec8e761b5";
            public std_msgs.Header header;
            public System.UInt32 ActiveTracks;
            public System.UInt32 TotalTracks;
            public List<person_tracker.TrackedPerson> Tracks;
            public readonly System.Byte POSEONLY = 1;
            public readonly System.Byte SKELETON = 2;
            public readonly System.Byte MOCAP = 3;
            public System.Byte TrackerType;
            public string TrackerName;

            public TrackerState ()
            {
                header = new std_msgs.Header();
                ActiveTracks = 0;
                TotalTracks = 0;
                Tracks = new List<person_tracker.TrackedPerson>();
                TrackerType = 0;
                TrackerName = "";
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += header.ToStringRaw() + "\n";
                string_rep += "ActiveTracks: " + Convert.ToString(ActiveTracks) + "\n";
                string_rep += "TotalTracks: " + Convert.ToString(TotalTracks) + "\n";
                string_rep += "Tracks:\n[";
                foreach (person_tracker.TrackedPerson element in Tracks)
                {
                    string_rep += " " + element.ToStringRaw();
                }
                string_rep += "]\n\n";
                string_rep += "TrackerType: " + Convert.ToString(TrackerType) + "\n";
                string_rep += "TrackerName: " + TrackerName + "\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                header.Serialize(stream);
                System.Byte[] ActiveTracks_bytes = BitConverter.GetBytes(ActiveTracks);
                stream.Write(ActiveTracks_bytes, 0, ActiveTracks_bytes.Length);
                System.Byte[] TotalTracks_bytes = BitConverter.GetBytes(TotalTracks);
                stream.Write(TotalTracks_bytes, 0, TotalTracks_bytes.Length);
                System.Byte[] Tracks_len_bytes = BitConverter.GetBytes((System.UInt32)Tracks.Count);
                stream.Write(Tracks_len_bytes, 0, Tracks_len_bytes.Length);
                foreach(person_tracker.TrackedPerson element in Tracks)
                {
                    element.Serialize(stream);
                }
                System.Byte[] TrackerType_bytes = new System.Byte[] {TrackerType};
                stream.Write(TrackerType_bytes, 0, TrackerType_bytes.Length);
                System.Byte[] TrackerName_bytes = System.Text.Encoding.UTF8.GetBytes(TrackerName);
                System.Byte[] TrackerName_len_bytes = BitConverter.GetBytes((System.UInt32)TrackerName_bytes.Length);
                stream.Write(TrackerName_len_bytes, 0, TrackerName_len_bytes.Length);
                stream.Write(TrackerName_bytes, 0, TrackerName_bytes.Length);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                curIndex += header.Deserialize(serialized, curIndex);
                ActiveTracks = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(ActiveTracks).Length;
                TotalTracks = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(TotalTracks).Length;
                System.UInt32 Tracks_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(Tracks_len).Length;
                for (int i = 0; i < (int)Tracks_len; i++)
                {
                    person_tracker.TrackedPerson element = new person_tracker.TrackedPerson();
                    curIndex += element.Deserialize(serialized, curIndex);
                    Tracks.Add(element);
                }
                TrackerType = serialized[curIndex];
                curIndex++;
                System.UInt32 TrackerName_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(TrackerName_len).Length;
                TrackerName = System.Text.Encoding.UTF8.GetString(serialized, curIndex, (int)TrackerName_len);
                curIndex += (int)TrackerName_len;
                return (curIndex - startIndex);
            }

        }
    }
}
