using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace person_tracker
    {
        public class SkeletonTrack : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "SkeletonTrack";
            public readonly string md5sum = "8402d778803fdc836d9e7fd54714d999";
            public std_msgs.Header header;
            public List<string> JointNames;
            public List<geometry_msgs.Transform> JointPositions;
            public List<float> Confidences;

            public SkeletonTrack ()
            {
                header = new std_msgs.Header();
                JointNames = new List<string>();
                JointPositions = new List<geometry_msgs.Transform>();
                Confidences = new List<float>();
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += header.ToStringRaw() + "\n";
                string_rep += "JointNames:\n[";
                foreach (string element in JointNames)
                {
                    string_rep += " " + element;
                }
                string_rep += "]\n\n";
                string_rep += "JointPositions:\n[";
                foreach (geometry_msgs.Transform element in JointPositions)
                {
                    string_rep += " " + element.ToStringRaw();
                }
                string_rep += "]\n\n";
                string_rep += "Confidences:\n[";
                foreach (float element in Confidences)
                {
                    string_rep += " " + Convert.ToString(element);
                }
                string_rep += "]\n\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                header.Serialize(stream);
                System.Byte[] JointNames_len_bytes = BitConverter.GetBytes((System.UInt32)JointNames.Count);
                stream.Write(JointNames_len_bytes, 0, JointNames_len_bytes.Length);
                foreach(string element in JointNames)
                {
                    System.Byte[] element_bytes = System.Text.Encoding.UTF8.GetBytes(element);
                    System.Byte[] element_len_bytes = BitConverter.GetBytes((System.UInt32)element_bytes.Length);
                    stream.Write(element_len_bytes, 0, element_len_bytes.Length);
                    stream.Write(element_bytes, 0, element_bytes.Length);
                }
                System.Byte[] JointPositions_len_bytes = BitConverter.GetBytes((System.UInt32)JointPositions.Count);
                stream.Write(JointPositions_len_bytes, 0, JointPositions_len_bytes.Length);
                foreach(geometry_msgs.Transform element in JointPositions)
                {
                    element.Serialize(stream);
                }
                System.Byte[] Confidences_len_bytes = BitConverter.GetBytes((System.UInt32)Confidences.Count);
                stream.Write(Confidences_len_bytes, 0, Confidences_len_bytes.Length);
                foreach(float element in Confidences)
                {
                    System.Byte[] element_bytes = BitConverter.GetBytes(element);
                    stream.Write(element_bytes, 0, element_bytes.Length);
                }
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                curIndex += header.Deserialize(serialized, curIndex);
                System.UInt32 JointNames_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(JointNames_len).Length;
                for (int i = 0; i < (int)JointNames_len; i++)
                {
                    System.UInt32 element_len = BitConverter.ToUInt32(serialized, curIndex);
                    curIndex += BitConverter.GetBytes(element_len).Length;
                    string element = System.Text.Encoding.UTF8.GetString(serialized, curIndex, (int)element_len);
                    curIndex += (int)element_len;
                    JointNames.Add(element);
                }
                System.UInt32 JointPositions_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(JointPositions_len).Length;
                for (int i = 0; i < (int)JointPositions_len; i++)
                {
                    geometry_msgs.Transform element = new geometry_msgs.Transform();
                    curIndex += element.Deserialize(serialized, curIndex);
                    JointPositions.Add(element);
                }
                System.UInt32 Confidences_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(Confidences_len).Length;
                for (int i = 0; i < (int)Confidences_len; i++)
                {
                    float element = BitConverter.ToSingle(serialized, curIndex);
                    curIndex += BitConverter.GetBytes(element).Length;
                    Confidences.Add(element);
                }
                return (curIndex - startIndex);
            }

        }
    }
}
