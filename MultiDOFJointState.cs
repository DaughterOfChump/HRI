using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace sensor_msgs
    {
        public class MultiDOFJointState : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "MultiDOFJointState";
            public readonly string md5sum = "690f272f0640d2631c305eeb8301e59d";
            public std_msgs.Header header;
            public List<string> joint_names;
            public List<geometry_msgs.Transform> transforms;
            public List<geometry_msgs.Twist> twist;
            public List<geometry_msgs.Wrench> wrench;

            public MultiDOFJointState ()
            {
                header = new std_msgs.Header();
                joint_names = new List<string>();
                transforms = new List<geometry_msgs.Transform>();
                twist = new List<geometry_msgs.Twist>();
                wrench = new List<geometry_msgs.Wrench>();
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += header.ToStringRaw() + "\n";
                string_rep += "joint_names:\n[";
                foreach (string element in joint_names)
                {
                    string_rep += " " + element;
                }
                string_rep += "]\n\n";
                string_rep += "transforms:\n[";
                foreach (geometry_msgs.Transform element in transforms)
                {
                    string_rep += " " + element.ToStringRaw();
                }
                string_rep += "]\n\n";
                string_rep += "twist:\n[";
                foreach (geometry_msgs.Twist element in twist)
                {
                    string_rep += " " + element.ToStringRaw();
                }
                string_rep += "]\n\n";
                string_rep += "wrench:\n[";
                foreach (geometry_msgs.Wrench element in wrench)
                {
                    string_rep += " " + element.ToStringRaw();
                }
                string_rep += "]\n\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                header.Serialize(stream);
                System.Byte[] joint_names_len_bytes = BitConverter.GetBytes((System.UInt32)joint_names.Count);
                stream.Write(joint_names_len_bytes, 0, joint_names_len_bytes.Length);
                foreach(string element in joint_names)
                {
                    System.Byte[] element_bytes = System.Text.Encoding.UTF8.GetBytes(element);
                    System.Byte[] element_len_bytes = BitConverter.GetBytes((System.UInt32)element_bytes.Length);
                    stream.Write(element_len_bytes, 0, element_len_bytes.Length);
                    stream.Write(element_bytes, 0, element_bytes.Length);
                }
                System.Byte[] transforms_len_bytes = BitConverter.GetBytes((System.UInt32)transforms.Count);
                stream.Write(transforms_len_bytes, 0, transforms_len_bytes.Length);
                foreach(geometry_msgs.Transform element in transforms)
                {
                    element.Serialize(stream);
                }
                System.Byte[] twist_len_bytes = BitConverter.GetBytes((System.UInt32)twist.Count);
                stream.Write(twist_len_bytes, 0, twist_len_bytes.Length);
                foreach(geometry_msgs.Twist element in twist)
                {
                    element.Serialize(stream);
                }
                System.Byte[] wrench_len_bytes = BitConverter.GetBytes((System.UInt32)wrench.Count);
                stream.Write(wrench_len_bytes, 0, wrench_len_bytes.Length);
                foreach(geometry_msgs.Wrench element in wrench)
                {
                    element.Serialize(stream);
                }
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                curIndex += header.Deserialize(serialized, curIndex);
                System.UInt32 joint_names_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(joint_names_len).Length;
                for (int i = 0; i < (int)joint_names_len; i++)
                {
                    System.UInt32 element_len = BitConverter.ToUInt32(serialized, curIndex);
                    curIndex += BitConverter.GetBytes(element_len).Length;
                    string element = System.Text.Encoding.UTF8.GetString(serialized, curIndex, (int)element_len);
                    curIndex += (int)element_len;
                    joint_names.Add(element);
                }
                System.UInt32 transforms_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(transforms_len).Length;
                for (int i = 0; i < (int)transforms_len; i++)
                {
                    geometry_msgs.Transform element = new geometry_msgs.Transform();
                    curIndex += element.Deserialize(serialized, curIndex);
                    transforms.Add(element);
                }
                System.UInt32 twist_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(twist_len).Length;
                for (int i = 0; i < (int)twist_len; i++)
                {
                    geometry_msgs.Twist element = new geometry_msgs.Twist();
                    curIndex += element.Deserialize(serialized, curIndex);
                    twist.Add(element);
                }
                System.UInt32 wrench_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(wrench_len).Length;
                for (int i = 0; i < (int)wrench_len; i++)
                {
                    geometry_msgs.Wrench element = new geometry_msgs.Wrench();
                    curIndex += element.Deserialize(serialized, curIndex);
                    wrench.Add(element);
                }
                return (curIndex - startIndex);
            }

        }
    }
}
