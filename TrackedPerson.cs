using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace person_tracker
    {
        public class TrackedPerson : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "TrackedPerson";
            public readonly string md5sum = "4994f5b75a0257b362850e17e381ee18";
            public std_msgs.Header header;
            public string Name;
            public System.UInt32 UID;
            public geometry_msgs.Pose Pose;
            public geometry_msgs.Twist Twist;
            public person_tracker.SkeletonTrack Skeleton;
            public List<person_tracker.HandTrack> Hands;
            public float Confidence;
            public readonly System.Byte POSEONLY = 1;
            public readonly System.Byte SKELETON = 2;
            public readonly System.Byte MOCAP = 3;
            public System.Byte TrackerType;
            public string TrackerName;

            public TrackedPerson ()
            {
                header = new std_msgs.Header();
                Name = "";
                UID = 0;
                Pose = new geometry_msgs.Pose();
                Twist = new geometry_msgs.Twist();
                Skeleton = new person_tracker.SkeletonTrack();
                Hands = new List<person_tracker.HandTrack>();
                Confidence = 0.0f;
                TrackerType = 0;
                TrackerName = "";
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += header.ToStringRaw() + "\n";
                string_rep += "Name: " + Name + "\n";
                string_rep += "UID: " + Convert.ToString(UID) + "\n";
                string_rep += Pose.ToStringRaw() + "\n";
                string_rep += Twist.ToStringRaw() + "\n";
                string_rep += Skeleton.ToStringRaw() + "\n";
                string_rep += "Hands:\n[";
                foreach (person_tracker.HandTrack element in Hands)
                {
                    string_rep += " " + element.ToStringRaw();
                }
                string_rep += "]\n\n";
                string_rep += "Confidence: " + Convert.ToString(Confidence) + "\n";
                string_rep += "TrackerType: " + Convert.ToString(TrackerType) + "\n";
                string_rep += "TrackerName: " + TrackerName + "\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                header.Serialize(stream);
                System.Byte[] Name_bytes = System.Text.Encoding.UTF8.GetBytes(Name);
                System.Byte[] Name_len_bytes = BitConverter.GetBytes((System.UInt32)Name_bytes.Length);
                stream.Write(Name_len_bytes, 0, Name_len_bytes.Length);
                stream.Write(Name_bytes, 0, Name_bytes.Length);
                System.Byte[] UID_bytes = BitConverter.GetBytes(UID);
                stream.Write(UID_bytes, 0, UID_bytes.Length);
                Pose.Serialize(stream);
                Twist.Serialize(stream);
                Skeleton.Serialize(stream);
                System.Byte[] Hands_len_bytes = BitConverter.GetBytes((System.UInt32)Hands.Count);
                stream.Write(Hands_len_bytes, 0, Hands_len_bytes.Length);
                foreach(person_tracker.HandTrack element in Hands)
                {
                    element.Serialize(stream);
                }
                System.Byte[] Confidence_bytes = BitConverter.GetBytes(Confidence);
                stream.Write(Confidence_bytes, 0, Confidence_bytes.Length);
                System.Byte[] TrackerType_bytes = new System.Byte[] {TrackerType};
                stream.Write(TrackerType_bytes, 0, TrackerType_bytes.Length);
                System.Byte[] TrackerName_bytes = System.Text.Encoding.UTF8.GetBytes(TrackerName);
                System.Byte[] TrackerName_len_bytes = BitConverter.GetBytes((System.UInt32)TrackerName_bytes.Length);
                stream.Write(TrackerName_len_bytes, 0, TrackerName_len_bytes.Length);
                stream.Write(TrackerName_bytes, 0, TrackerName_bytes.Length);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                curIndex += header.Deserialize(serialized, curIndex);
                System.UInt32 Name_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(Name_len).Length;
                Name = System.Text.Encoding.UTF8.GetString(serialized, curIndex, (int)Name_len);
                curIndex += (int)Name_len;
                UID = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(UID).Length;
                curIndex += Pose.Deserialize(serialized, curIndex);
                curIndex += Twist.Deserialize(serialized, curIndex);
                curIndex += Skeleton.Deserialize(serialized, curIndex);
                System.UInt32 Hands_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(Hands_len).Length;
                for (int i = 0; i < (int)Hands_len; i++)
                {
                    person_tracker.HandTrack element = new person_tracker.HandTrack();
                    curIndex += element.Deserialize(serialized, curIndex);
                    Hands.Add(element);
                }
                Confidence = BitConverter.ToSingle(serialized, curIndex);
                curIndex += BitConverter.GetBytes(Confidence).Length;
                TrackerType = serialized[curIndex];
                curIndex++;
                System.UInt32 TrackerName_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(TrackerName_len).Length;
                TrackerName = System.Text.Encoding.UTF8.GetString(serialized, curIndex, (int)TrackerName_len);
                curIndex += (int)TrackerName_len;
                return (curIndex - startIndex);
            }

        }
    }
}
